defun small-positive-odd ( a) ( cond ( (and (and (< a 100) (> a 0)) (> a 0) (oddp a)) T) (T nil))
defun f-to-c ( a) ( + ( * ( / 9 5) a) 32 )
defun my-abs ( x) ( if ( < x 0) ( - x) x)
defun odd-positive ( a) ( if (and ( oddp a) ( < a 0) )  ( - a) a )
defun order ( a b) ( if (> a b) ( list b a) ( list a b)  )
defun compare (a b) ( cond ((= a b) 'equal ) ((< a b) 'small ) ((> a b) 'bigger))
defun how-compute (a b c)( cond ((= c ( + a b)) 'sum) (( = c ( * a b)) 'product ) (t 'unknown) )
defun constraint (x min max) (cond ( (< x min) min ) ( (> x max) max ) (t x)  )
defun firstzero (a b c) ( cond ((= a 0) 'first) ( (= b 0) 'second) ( (= c 0) 'third) (t 'none))
defun cycle (x) (cond ( (= x 99) 1) (t (+ x 1)) )
defun how-alike(a b) ( cond ((= a b) 'same ) ( (and (oddp a) (oddp b)) 'bothodd) ((and (< a 0) (< b 0)) 'bothnegative ) (t 'notalike)  )
defun same-sign (a b) ( cond ( (and (< a 0) (< b 0)) t) ( ( and (> a 0) (> b 0)) t) ( t nil))
 (defun root-of-second-degree (a b c) (/ (+ (- b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a)))
