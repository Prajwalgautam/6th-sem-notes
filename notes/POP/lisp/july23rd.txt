(defun count-backwards (n)
              (do ((i n (- i 1))) ((zerop i)) (format t "~S " i)))

(defun do-factorial (n)
              (do ((i n (- i 1)) (result 1 (* result i))) ((zerop i) result )))

(defun my-length (mylist)
              (do ((len 0 (+ len 1))(mytemplist mylist (rest mytemplist)) ) ((null mytemplist) len ) ))

 (defun iterative-intersection (x y)
              (do ((x1 x (rest x1)) (result nil (if (member (first x1) y) (cons (first x1) result) result))) ((null x1) result )))

(check-all-odds '(1 3 5 7 9)) 
T

(find-matching-elements 
	`(b i r d)
	`(c a r p e t))
R

(defun find-largest-number (mylist)
	(let 	((largest (first mylist))) (dolist (element mylist largest)
		(if (> element largest) (setf largest element))))
)

(dotimes (i 4)
              (format t "I is ~S" i))

(dolist (x '(red blue green) 'flowers)
              (format t "~&Roses are ~S" x))

(defun power-of-2 (n)
	(let 	((result 1)) (dotimes (i  n result) 
				(setf result (* result 2))))
)

(defun first-integer (mylist)
	(dolist (element mylist nil) (if (integerp element) (return element)))
)

(defun iterative-fibonacci (n)
(let* 	((a 1) (b 1) (temp (+ a b))) 
		(dotimes (i n b) 
		(prog1  temp (setf a b) (setf b temp) (setf temp (+ a b)) )))
)